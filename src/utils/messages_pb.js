/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AiyBound', null, global);
goog.exportSymbol('proto.ClientBound', null, global);
goog.exportSymbol('proto.CodecData', null, global);
goog.exportSymbol('proto.FrameData', null, global);
goog.exportSymbol('proto.FrameData.FrameType', null, global);
goog.exportSymbol('proto.InferenceData', null, global);
goog.exportSymbol('proto.InferenceElement', null, global);
goog.exportSymbol('proto.Label', null, global);
goog.exportSymbol('proto.Rectangle', null, global);
goog.exportSymbol('proto.StreamControl', null, global);
goog.exportSymbol('proto.StreamData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AiyBound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AiyBound.oneofGroups_);
};
goog.inherits(proto.AiyBound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AiyBound.displayName = 'proto.AiyBound';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AiyBound.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.AiyBound.MessageCase = {
  MESSAGE_NOT_SET: 0,
  STREAM_CONTROL: 1
};

/**
 * @return {proto.AiyBound.MessageCase}
 */
proto.AiyBound.prototype.getMessageCase = function() {
  return /** @type {proto.AiyBound.MessageCase} */(jspb.Message.computeOneofCase(this, proto.AiyBound.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AiyBound.prototype.toObject = function(opt_includeInstance) {
  return proto.AiyBound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AiyBound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiyBound.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamControl: (f = msg.getStreamControl()) && proto.StreamControl.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AiyBound}
 */
proto.AiyBound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AiyBound;
  return proto.AiyBound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AiyBound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AiyBound}
 */
proto.AiyBound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StreamControl;
      reader.readMessage(value,proto.StreamControl.deserializeBinaryFromReader);
      msg.setStreamControl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AiyBound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AiyBound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AiyBound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AiyBound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamControl();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StreamControl.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamControl stream_control = 1;
 * @return {?proto.StreamControl}
 */
proto.AiyBound.prototype.getStreamControl = function() {
  return /** @type{?proto.StreamControl} */ (
    jspb.Message.getWrapperField(this, proto.StreamControl, 1));
};


/** @param {?proto.StreamControl|undefined} value */
proto.AiyBound.prototype.setStreamControl = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.AiyBound.oneofGroups_[0], value);
};


proto.AiyBound.prototype.clearStreamControl = function() {
  this.setStreamControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AiyBound.prototype.hasStreamControl = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientBound.oneofGroups_);
};
goog.inherits(proto.ClientBound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientBound.displayName = 'proto.ClientBound';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientBound.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.ClientBound.MessageCase = {
  MESSAGE_NOT_SET: 0,
  STREAM_DATA: 1
};

/**
 * @return {proto.ClientBound.MessageCase}
 */
proto.ClientBound.prototype.getMessageCase = function() {
  return /** @type {proto.ClientBound.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ClientBound.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientBound.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientBound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientBound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBound.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamData: (f = msg.getStreamData()) && proto.StreamData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBound}
 */
proto.ClientBound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientBound;
  return proto.ClientBound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBound}
 */
proto.ClientBound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StreamData;
      reader.readMessage(value,proto.StreamData.deserializeBinaryFromReader);
      msg.setStreamData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientBound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StreamData.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamData stream_data = 1;
 * @return {?proto.StreamData}
 */
proto.ClientBound.prototype.getStreamData = function() {
  return /** @type{?proto.StreamData} */ (
    jspb.Message.getWrapperField(this, proto.StreamData, 1));
};


/** @param {?proto.StreamData|undefined} value */
proto.ClientBound.prototype.setStreamData = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ClientBound.oneofGroups_[0], value);
};


proto.ClientBound.prototype.clearStreamData = function() {
  this.setStreamData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientBound.prototype.hasStreamData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StreamControl.displayName = 'proto.StreamControl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamControl.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamControl}
 */
proto.StreamControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamControl;
  return proto.StreamControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamControl}
 */
proto.StreamControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.StreamControl.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.StreamControl.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.StreamData.oneofGroups_);
};
goog.inherits(proto.StreamData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StreamData.displayName = 'proto.StreamData';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.StreamData.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.StreamData.TypeCase = {
  TYPE_NOT_SET: 0,
  CODEC_DATA: 1,
  FRAME_DATA: 2,
  INFERENCE_DATA: 3
};

/**
 * @return {proto.StreamData.TypeCase}
 */
proto.StreamData.prototype.getTypeCase = function() {
  return /** @type {proto.StreamData.TypeCase} */(jspb.Message.computeOneofCase(this, proto.StreamData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamData.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamData.toObject = function(includeInstance, msg) {
  var f, obj = {
    codecData: (f = msg.getCodecData()) && proto.CodecData.toObject(includeInstance, f),
    frameData: (f = msg.getFrameData()) && proto.FrameData.toObject(includeInstance, f),
    inferenceData: (f = msg.getInferenceData()) && proto.InferenceData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamData}
 */
proto.StreamData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamData;
  return proto.StreamData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamData}
 */
proto.StreamData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CodecData;
      reader.readMessage(value,proto.CodecData.deserializeBinaryFromReader);
      msg.setCodecData(value);
      break;
    case 2:
      var value = new proto.FrameData;
      reader.readMessage(value,proto.FrameData.deserializeBinaryFromReader);
      msg.setFrameData(value);
      break;
    case 3:
      var value = new proto.InferenceData;
      reader.readMessage(value,proto.InferenceData.deserializeBinaryFromReader);
      msg.setInferenceData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodecData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CodecData.serializeBinaryToWriter
    );
  }
  f = message.getFrameData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FrameData.serializeBinaryToWriter
    );
  }
  f = message.getInferenceData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.InferenceData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CodecData codec_data = 1;
 * @return {?proto.CodecData}
 */
proto.StreamData.prototype.getCodecData = function() {
  return /** @type{?proto.CodecData} */ (
    jspb.Message.getWrapperField(this, proto.CodecData, 1));
};


/** @param {?proto.CodecData|undefined} value */
proto.StreamData.prototype.setCodecData = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.StreamData.oneofGroups_[0], value);
};


proto.StreamData.prototype.clearCodecData = function() {
  this.setCodecData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StreamData.prototype.hasCodecData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FrameData frame_data = 2;
 * @return {?proto.FrameData}
 */
proto.StreamData.prototype.getFrameData = function() {
  return /** @type{?proto.FrameData} */ (
    jspb.Message.getWrapperField(this, proto.FrameData, 2));
};


/** @param {?proto.FrameData|undefined} value */
proto.StreamData.prototype.setFrameData = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.StreamData.oneofGroups_[0], value);
};


proto.StreamData.prototype.clearFrameData = function() {
  this.setFrameData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StreamData.prototype.hasFrameData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InferenceData inference_data = 3;
 * @return {?proto.InferenceData}
 */
proto.StreamData.prototype.getInferenceData = function() {
  return /** @type{?proto.InferenceData} */ (
    jspb.Message.getWrapperField(this, proto.InferenceData, 3));
};


/** @param {?proto.InferenceData|undefined} value */
proto.StreamData.prototype.setInferenceData = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.StreamData.oneofGroups_[0], value);
};


proto.StreamData.prototype.clearInferenceData = function() {
  this.setInferenceData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StreamData.prototype.hasInferenceData = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CodecData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CodecData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CodecData.displayName = 'proto.CodecData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CodecData.prototype.toObject = function(opt_includeInstance) {
  return proto.CodecData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CodecData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CodecData.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CodecData}
 */
proto.CodecData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CodecData;
  return proto.CodecData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CodecData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CodecData}
 */
proto.CodecData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CodecData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CodecData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CodecData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CodecData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.CodecData.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CodecData.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.CodecData.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.CodecData.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.CodecData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.CodecData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.CodecData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.CodecData.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FrameData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FrameData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FrameData.displayName = 'proto.FrameData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FrameData.prototype.toObject = function(opt_includeInstance) {
  return proto.FrameData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FrameData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FrameData.toObject = function(includeInstance, msg) {
  var f, obj = {
    seq: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pts: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FrameData}
 */
proto.FrameData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FrameData;
  return proto.FrameData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FrameData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FrameData}
 */
proto.FrameData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPts(value);
      break;
    case 3:
      var value = /** @type {!proto.FrameData.FrameType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FrameData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FrameData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FrameData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FrameData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPts();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.FrameData.FrameType = {
  UNKNOWN: 0,
  KEY: 1,
  DELTA: 2
};

/**
 * optional uint64 seq = 1;
 * @return {number}
 */
proto.FrameData.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.FrameData.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 pts = 2;
 * @return {number}
 */
proto.FrameData.prototype.getPts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FrameData.prototype.setPts = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional FrameType type = 3;
 * @return {!proto.FrameData.FrameType}
 */
proto.FrameData.prototype.getType = function() {
  return /** @type {!proto.FrameData.FrameType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.FrameData.FrameType} value */
proto.FrameData.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.FrameData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.FrameData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.FrameData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.FrameData.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InferenceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InferenceData.repeatedFields_, null);
};
goog.inherits(proto.InferenceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InferenceData.displayName = 'proto.InferenceData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InferenceData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InferenceData.prototype.toObject = function(opt_includeInstance) {
  return proto.InferenceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InferenceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InferenceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.InferenceElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InferenceData}
 */
proto.InferenceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InferenceData;
  return proto.InferenceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InferenceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InferenceData}
 */
proto.InferenceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.InferenceElement;
      reader.readMessage(value,proto.InferenceElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InferenceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InferenceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InferenceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InferenceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.InferenceElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InferenceElement elements = 1;
 * @return {!Array<!proto.InferenceElement>}
 */
proto.InferenceData.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.InferenceElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.InferenceElement, 1));
};


/** @param {!Array<!proto.InferenceElement>} value */
proto.InferenceData.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.InferenceElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.InferenceElement}
 */
proto.InferenceData.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.InferenceElement, opt_index);
};


proto.InferenceData.prototype.clearElementsList = function() {
  this.setElementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InferenceElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.InferenceElement.oneofGroups_);
};
goog.inherits(proto.InferenceElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InferenceElement.displayName = 'proto.InferenceElement';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.InferenceElement.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.InferenceElement.ElementCase = {
  ELEMENT_NOT_SET: 0,
  LABEL: 1,
  RECTANGLE: 2
};

/**
 * @return {proto.InferenceElement.ElementCase}
 */
proto.InferenceElement.prototype.getElementCase = function() {
  return /** @type {proto.InferenceElement.ElementCase} */(jspb.Message.computeOneofCase(this, proto.InferenceElement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InferenceElement.prototype.toObject = function(opt_includeInstance) {
  return proto.InferenceElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InferenceElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InferenceElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: (f = msg.getLabel()) && proto.Label.toObject(includeInstance, f),
    rectangle: (f = msg.getRectangle()) && proto.Rectangle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InferenceElement}
 */
proto.InferenceElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InferenceElement;
  return proto.InferenceElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InferenceElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InferenceElement}
 */
proto.InferenceElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Label;
      reader.readMessage(value,proto.Label.deserializeBinaryFromReader);
      msg.setLabel(value);
      break;
    case 2:
      var value = new proto.Rectangle;
      reader.readMessage(value,proto.Rectangle.deserializeBinaryFromReader);
      msg.setRectangle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InferenceElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InferenceElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InferenceElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InferenceElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Label.serializeBinaryToWriter
    );
  }
  f = message.getRectangle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Rectangle.serializeBinaryToWriter
    );
  }
};


/**
 * optional Label label = 1;
 * @return {?proto.Label}
 */
proto.InferenceElement.prototype.getLabel = function() {
  return /** @type{?proto.Label} */ (
    jspb.Message.getWrapperField(this, proto.Label, 1));
};


/** @param {?proto.Label|undefined} value */
proto.InferenceElement.prototype.setLabel = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.InferenceElement.oneofGroups_[0], value);
};


proto.InferenceElement.prototype.clearLabel = function() {
  this.setLabel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InferenceElement.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Rectangle rectangle = 2;
 * @return {?proto.Rectangle}
 */
proto.InferenceElement.prototype.getRectangle = function() {
  return /** @type{?proto.Rectangle} */ (
    jspb.Message.getWrapperField(this, proto.Rectangle, 2));
};


/** @param {?proto.Rectangle|undefined} value */
proto.InferenceElement.prototype.setRectangle = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.InferenceElement.oneofGroups_[0], value);
};


proto.InferenceElement.prototype.clearRectangle = function() {
  this.setRectangle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.InferenceElement.prototype.hasRectangle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Label.displayName = 'proto.Label';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Label} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    x: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    color: jspb.Message.getFieldWithDefault(msg, 4, 0),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Label}
 */
proto.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Label;
  return proto.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Label}
 */
proto.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Label.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Label.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getColor();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.Label.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Label.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.Label.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Label.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.Label.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Label.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 color = 4;
 * @return {number}
 */
proto.Label.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Label.prototype.setColor = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 size = 5;
 * @return {number}
 */
proto.Label.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Label.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Rectangle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Rectangle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Rectangle.displayName = 'proto.Rectangle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Rectangle.prototype.toObject = function(opt_includeInstance) {
  return proto.Rectangle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Rectangle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Rectangle.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    w: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    h: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    color: jspb.Message.getFieldWithDefault(msg, 5, 0),
    weight: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Rectangle}
 */
proto.Rectangle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Rectangle;
  return proto.Rectangle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Rectangle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Rectangle}
 */
proto.Rectangle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setH(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Rectangle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Rectangle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Rectangle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Rectangle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getW();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getH();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getColor();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Rectangle.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Rectangle.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Rectangle.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Rectangle.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float w = 3;
 * @return {number}
 */
proto.Rectangle.prototype.getW = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Rectangle.prototype.setW = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float h = 4;
 * @return {number}
 */
proto.Rectangle.prototype.getH = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Rectangle.prototype.setH = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint32 color = 5;
 * @return {number}
 */
proto.Rectangle.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Rectangle.prototype.setColor = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 weight = 6;
 * @return {number}
 */
proto.Rectangle.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Rectangle.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto);
